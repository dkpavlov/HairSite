apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'
/*idea.module.iml {
    beforeMerged { module ->
        module.dependencies.clear()
    }
    whenMerged { module ->
        module.dependencies*.exported = true
    }
}

idea.project.ipr {
    beforeMerged { project ->
        project.modulePaths.clear()
    }
    withXml { provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.pegdown:pegdown:1.4.2'
    compile 'org.springframework:spring-core:4.1.1.RELEASE'
    compile 'org.springframework:spring-webmvc:4.1.1.RELEASE'
    compile 'org.springframework.data:spring-data-jpa:1.7.0.RELEASE'

    compile 'org.springframework.security:spring-security-web:3.2.5.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.2.5.RELEASE'

    compile 'org.hibernate:hibernate-entitymanager:4.3.6.Final'
    compile 'org.hibernate:hibernate-validator:5.1.2.Final'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    compile 'org.hibernate:hibernate-search:4.5.1.Final'

    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'commons-io:commons-io:2.4'

    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'opensymphony:sitemesh:2.4.2'

    runtime 'javax.servlet:jstl:1.2'
    runtime 'mysql:mysql-connector-java:5.1.6'
}

jettyRun.contextPath = ''

jettyRun{
    jettyEnvXml = file('src/main/resources/jetty-env.xml')
}

[jettyRun, jettyRunWar,jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar,jettyStop]*.stopKey = 'stopKey'


